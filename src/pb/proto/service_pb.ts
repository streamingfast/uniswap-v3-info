// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file proto/service.proto (package uniswap.info.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message uniswap.info.v1.PoolDayDatasRequest
 */
export class PoolDayDatasRequest extends Message<PoolDayDatasRequest> {
  /**
   * @generated from field: repeated string addresses = 3;
   */
  addresses: string[] = [];

  constructor(data?: PartialMessage<PoolDayDatasRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "uniswap.info.v1.PoolDayDatasRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "addresses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolDayDatasRequest {
    return new PoolDayDatasRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolDayDatasRequest {
    return new PoolDayDatasRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolDayDatasRequest {
    return new PoolDayDatasRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PoolDayDatasRequest | PlainMessage<PoolDayDatasRequest> | undefined, b: PoolDayDatasRequest | PlainMessage<PoolDayDatasRequest> | undefined): boolean {
    return proto3.util.equals(PoolDayDatasRequest, a, b);
  }
}

/**
 * @generated from message uniswap.info.v1.PoolDayDatasResponse
 */
export class PoolDayDatasResponse extends Message<PoolDayDatasResponse> {
  /**
   * @generated from field: repeated uniswap.info.v1.PoolsDayData pool_days_data = 1;
   */
  poolDaysData: PoolsDayData[] = [];

  constructor(data?: PartialMessage<PoolDayDatasResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "uniswap.info.v1.PoolDayDatasResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_days_data", kind: "message", T: PoolsDayData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolDayDatasResponse {
    return new PoolDayDatasResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolDayDatasResponse {
    return new PoolDayDatasResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolDayDatasResponse {
    return new PoolDayDatasResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PoolDayDatasResponse | PlainMessage<PoolDayDatasResponse> | undefined, b: PoolDayDatasResponse | PlainMessage<PoolDayDatasResponse> | undefined): boolean {
    return proto3.util.equals(PoolDayDatasResponse, a, b);
  }
}

/**
 * @generated from message uniswap.info.v1.PoolsDayData
 */
export class PoolsDayData extends Message<PoolsDayData> {
  /**
   * @generated from field: uint32 date = 1;
   */
  date = 0;

  /**
   * @generated from field: double volumeUSD = 2;
   */
  volumeUSD = 0;

  /**
   * @generated from field: double tvlUSD = 3;
   */
  tvlUSD = 0;

  constructor(data?: PartialMessage<PoolsDayData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "uniswap.info.v1.PoolsDayData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "date", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "volumeUSD", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "tvlUSD", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolsDayData {
    return new PoolsDayData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolsDayData {
    return new PoolsDayData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolsDayData {
    return new PoolsDayData().fromJsonString(jsonString, options);
  }

  static equals(a: PoolsDayData | PlainMessage<PoolsDayData> | undefined, b: PoolsDayData | PlainMessage<PoolsDayData> | undefined): boolean {
    return proto3.util.equals(PoolsDayData, a, b);
  }
}

